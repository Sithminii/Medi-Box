// Include Libraries
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHTesp.h>
#include <WiFi.h>
#include <PubSubClient.h>
#include <ESP32Servo.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

//Define OLED parameters
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define SCREEN_ADDRESS 0x3C

#define BUZZER 5
#define LED_1 15
#define PB_CANCEL 34
#define PB_OK 32
#define PB_UP 33
#define PB_DOWN 35
#define DHTPIN 12
const int LDRpin = 36;
const int servoPin = 18;

#define NTP_SERVER     "pool.ntp.org"  

// Declare objects
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
DHTesp dhtsensor;

WiFiClient espClient;
PubSubClient mqttClient(espClient);
Servo servo;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP);

//Global variables
long UTC_OFFSET = 0;  // Setting the offset as a global variale
int UTC_OFFSET_DST = 0;

//Time variables
int days = 0; 
int hours = 0;
int minutes = 0;
int seconds = 0;

//Alarm 
bool alarm_enabled = true;
int n_alarms = 3;
int alarm_hours[] = {0,0,0};
int alarm_minutes[] = {0,0,0};
bool alarm_triggered[] = {false, false, false};

//Alarm music
int n_notes = 17;
int C = 262;
int D = 294;
int E = 330;
int F = 349;
int G = 392;
int Gsharp = 415;
int A = 440;
int B = 494;
int C_H = 523;
int D_H = 587;
int Dsharp_H = 622;
int E_H = 659;
int notes[] = {E_H, Dsharp_H, E_H, Dsharp_H, E_H, B, D_H, C_H, A, C, E, A, B, E, Gsharp, B, C_H};  //A music to indicate the medicine time

//Menu modes
int current_mode = 0;
int max_modes = 6; 
String modes[] = {"1 - Set time zone", "2 - Set Time", "3 - Set Alarm 1", "4 - Set Alarm 2", "5 - Set Alarm 3", "6 - Disable Alarms"};
char tempAr[6]="30";
char LDR_chr[6];
float LDR_val;
int minAngle;
int crlFact;
int theta=0;
bool isScheduledON=false;
unsigned long scheduledOnTime;

void setup() {
  // put your setup code here, to run once:
  pinMode(BUZZER, OUTPUT);
  pinMode(LED_1, OUTPUT);
  pinMode(PB_CANCEL, INPUT);
  pinMode(PB_OK, INPUT);
  pinMode(PB_DOWN, INPUT);
  pinMode(PB_UP, INPUT);

  dhtsensor.setup(DHTPIN, DHTesp::DHT22);

  setupWifi();

  setupMqtt();

  Serial.begin(9600);

  if (!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  }

  display.display();
  delay(500);
  
  //Connecting to wifi
  WiFi.begin("Wokwi-GUEST", "", 6);
  while (WiFi.status() != WL_CONNECTED) {
    delay(250);
    display.clearDisplay();
    print_line("Connecting to WIFI", 0, 0, 2);
  }

  display.clearDisplay();
  print_line("Connected to WIFI", 0, 0, 2);

  //Connecting to time using NTP server
  configTime(UTC_OFFSET, UTC_OFFSET_DST, NTP_SERVER);

  display.clearDisplay();

  //Displaying the welcome message
  print_line("Welcome to Medibox!", 10 ,20 , 2);
  delay(500);
  display.clearDisplay();
  servo.attach(servoPin, 500, 2400);
  timeClient.begin();
  timeClient.setTimeOffset(5.5 * 3600);
}

void loop() {
  // put your main code here, to run repeatedly:\

  update_time_with_check_alarm();
  if (digitalRead(PB_OK) == LOW) {
    delay(200);
    go_to_menu();
  }
  check_temp();

  if(!mqttClient.connected()){
    connectToBroker();
  }

  LDR_val = analogRead(LDRpin)/4063.0;
  Serial.println(LDR_val);

  updateTemperature();
  Serial.println(tempAr);
  String(LDR_val, 2).toCharArray(LDR_chr, 6);
  mqttClient.loop();
  mqttClient.publish("ENTC-ADMIN-TEMP", tempAr);
  mqttClient.publish("Intensity_Medibox", LDR_chr);

  checkSchedule();
  delay(1000);
  theta=minAngle + (180-minAngle)*crlFact*LDR_val;
  servo.write(theta);
  delay(50);

  Serial.println(theta);
}

void buzzerOn(bool on) {
  if (on) {
    tone(BUZZER,256);
  }
  else {
    noTone(BUZZER);
  }
}

void setupMqtt() {
  mqttClient.setServer("test.mosquitto.org", 1883);
  mqttClient.setCallback(receiveCallback);
}

void receiveCallback(char* topic, byte* payload, unsigned int length){
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  char payloadCharAr[length];
  for(int i = 0;i<length; i++) {
    Serial.print((char)payload[i]);
    payloadCharAr[i] = (char)payload[i];
  }
  Serial.println();
  if (strcmp(topic,"ENTC-ADMIN-MAIN-ON-OFF") == 0) {
    buzzerOn(payloadCharAr[0] =='1');
  }
  else if(strcmp(topic, "ENTC-ADMIN-SCH-ON") == 0) {
    if(payloadCharAr[0] == 'N') {
      isScheduledON = false;
    }
    else{
      isScheduledON = true;
      scheduledOnTime = atol(payloadCharAr);
    }
  }
  else if (strcmp(topic, "Min_Angle") == 0) {
        minAngle = atoi(payloadCharAr);
   }
  else if (strcmp(topic, "Control_Factor") == 0) {
        crlFact = atoi(payloadCharAr);
  }
}

void connectToBroker(){
  while (!mqttClient.connected()) {
    Serial.print("Attempting MQTT connection...");
    if (mqttClient.connect("ESP32-0123456789")) {
      Serial.println("connected");
      mqttClient.subscribe("ENTC-ADMIN-MAIN-ON-OFF");
      mqttClient.subscribe("ENTC-ADMIN-SCH-ON");
      mqttClient.subscribe("Min_Angle");
      mqttClient.subscribe("Control_Factor");
    }
    else {
      Serial.print("failed ");
      Serial.print(mqttClient.state());
      delay(5000);
    }
  }
}

void updateTemperature() {
  TempAndHumidity data = dhtsensor.getTempAndHumidity();
  String(data.temperature,2).toCharArray(tempAr, 6);
}

void setupWifi() {
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println("Wokwi-GUEST");
  WiFi.begin("Wokwi-GUEST", "");
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

unsigned long getTime() {
  timeClient.update();
  return timeClient.getEpochTime();
}

void checkSchedule() {
  if(isScheduledON) {
    unsigned long currentTime = getTime();
    if(currentTime > scheduledOnTime) {
      buzzerOn(true);
      isScheduledON = false;
      Serial.println("Scheduled ON");
      mqttClient.publish("On-Off-ESP", "1");
      mqttClient.publish("Sch-ESP-On", "0");
    }
  }
}

//Print a line
void print_line(String text, int column, int row, int text_size) {
  display.setTextSize(text_size);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(column, row);
  display.println(text);
  display.display();
}

//Print time
void print_time_now(void) {
  display.clearDisplay();
  print_line(String(days), 0, 0, 2);
  print_line(":", 20, 0, 2);
  print_line(String(hours), 30, 0, 2);
  print_line(":", 50, 0, 2);
  print_line(String(minutes), 60, 0, 2);
  print_line(":", 80, 0, 2);
  print_line(String(seconds), 90, 0, 2);
}

//Update time using NTP server
void update_time() {
  struct tm timeinfo;
  getLocalTime(&timeinfo);

  char timeHour[3];
  strftime(timeHour, 3, "%H", &timeinfo);
  hours = atoi(timeHour);

  char timeMinute[3];
  strftime(timeMinute, 3, "%M", &timeinfo);
  minutes = atoi(timeMinute);

  char timeSecond[3];
  strftime(timeSecond, 3, "%S", &timeinfo);
  seconds = atoi(timeSecond);

  char timeDay[3];
  strftime(timeDay, 3, "%d", &timeinfo);
  days = atoi(timeDay);

}

//Ring the alarm
void ring_alarm() {
  display.clearDisplay();
  print_line("MEDICINE TIME!", 0, 0, 2);

  digitalWrite(LED_1, HIGH);

  bool break_happened = false;

  //Ring the buzzer
  while (break_happened == false && digitalRead(PB_CANCEL) == HIGH) {
    for (int i=0; i < n_notes; i++) {
      if (digitalRead(PB_CANCEL) == LOW) {
        delay(200);
        break_happened = true;
        break;
      }
      tone (BUZZER, notes[i]);
      delay(500);
      noTone(BUZZER);
      delay(2);
    }
  }
  
  digitalWrite(LED_1, LOW);
  display.clearDisplay();

}

//Update the time while checking whether the alarm time has occured
void update_time_with_check_alarm(void) {
  update_time();
  print_time_now();

  if (alarm_enabled == true) {
    for (int i = 0; i < n_alarms; i++) {
      if (alarm_triggered[i] == false && alarm_hours[i] == hours && alarm_minutes[i] == minutes) {
        ring_alarm();
        alarm_triggered[i] = true;
      }
    }
  }
}

//If a button is pressed defines what it shows
int wait_for_button_press() {
  while (true) {
    if (digitalRead(PB_UP) == LOW) {
      delay(200);
      return PB_UP;
    }

    else if (digitalRead(PB_DOWN) == LOW) {
      delay(200);
      return PB_DOWN;
    }

    else if (digitalRead(PB_OK) == LOW) {
      delay(200);
      return PB_OK;
    }

    else if (digitalRead(PB_CANCEL) == LOW) {
      delay(200);
      return PB_CANCEL;
    }

    update_time();
  }
}

//Defines what happens in the menu when the user press the push buttons
void go_to_menu() {
  while (digitalRead(PB_CANCEL) == HIGH) {
    display.clearDisplay();
    print_line(modes[current_mode], 0, 0, 2);

    int pressed = wait_for_button_press();

    if (pressed == PB_UP) {
      delay(200);
      current_mode += 1;
      current_mode = current_mode % max_modes;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      current_mode -= 1;
      if (current_mode < 0) {
        current_mode = max_modes - 1;
      }
    }

    else if (pressed == PB_OK) {
      delay(200);
      run_mode(current_mode);
    }

    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }
}

//The user can set time using the menu
void set_time() {

  int temp_hour = hours;
  while (true) {
    display.clearDisplay();
    print_line("Enter hour: " + String(temp_hour), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_hour += 1;
      temp_hour = temp_hour % 24;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_hour -= 1;
      if (temp_hour < 0) {
        temp_hour = 23;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      hours = temp_hour;
      break;
    }
    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }

  int temp_minute = minutes;
  while (true) {
    display.clearDisplay();
    print_line("Enter minute: " + String(temp_minute), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_minute += 1;
      temp_minute = temp_minute % 60;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_minute -= 1;
      if (temp_minute < 0) {
        temp_minute = 59;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      minutes = temp_minute;
      break;
    }
    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }
  display.clearDisplay();
  print_line("Time is set", 0, 0, 2);
  delay(1000);
}

//The user can set alarm using the menu
void set_alarm(int alarm) {

  int temp_hour = alarm_hours[alarm];
  while (true) {
    display.clearDisplay();
    print_line("Enter hour: " + String(temp_hour), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_hour += 1;
      temp_hour = temp_hour % 24;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_hour -= 1;
      if (temp_hour < 0) {
        temp_hour = 23;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      alarm_hours[alarm] = temp_hour;
      break;
    }
    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }

  int temp_minute = alarm_minutes[alarm];
  while (true) {
    display.clearDisplay();
    print_line("Enter minute: " + String(temp_minute), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_minute += 1;
      temp_minute = temp_minute % 60;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_minute -= 1;
      if (temp_minute < 0) {
        temp_minute = 59;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      alarm_minutes[alarm] = temp_minute;
      break;
    }
    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }
  display.clearDisplay();
  print_line("Alarm is set", 0, 0, 2);
  delay(1000);
}

//The user can set time zone using the menu
void time_zone() {
  UTC_OFFSET = 0; //Sets the offset to zero in order to avoid the offsets inserted by the user from adding together
  int temp_hour = 0;
  while (true) {
    display.clearDisplay();
    print_line("Enter hour: " + String(temp_hour), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_hour += 1;
      temp_hour = temp_hour % 24;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_hour -= 1;
      if (temp_hour < 0) {
        temp_hour = 23;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      UTC_OFFSET += temp_hour * 60 * 60; //Converts to seconds and adds to the offset
      break;
    }

    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }

  int temp_minute = 0;
  while (true) {
    display.clearDisplay();
    print_line("Enter minute: " + String(temp_minute), 0, 0, 2);

    int pressed = wait_for_button_press();
    if (pressed == PB_UP) {
      delay(200);
      temp_minute += 1;
      temp_minute = temp_minute % 60;
    }

    else if (pressed == PB_DOWN) {
      delay(200);
      temp_minute -= 1;
      if (temp_minute < 0) {
        temp_minute = 59;
      }   
    }

    else if (pressed == PB_OK) {
      delay(200);
      UTC_OFFSET += temp_minute * 60; //Converts to seconds and adds to the offset
      break;
    }

    else if (pressed == PB_CANCEL) {
      delay(200);
      break;
    }
  }

  configTime(UTC_OFFSET, UTC_OFFSET_DST, NTP_SERVER); //Updates the time zone

  display.clearDisplay();
  print_line("Time zone is set", 0, 0, 2);
  delay(1000);
}

//Defines the mode in the menu to be executed
void run_mode(int mode) {
  if (mode == 0) {
    time_zone();
  }

  else if (mode == 1) {
    set_time();
  }

  else if (mode == 2 || mode == 3 || mode == 4) {
    set_alarm(mode - 2);
  }

  else if (mode == 5) {
    alarm_enabled = false;
  }
}

//Checks the temp and humidity
void check_temp () {
  TempAndHumidity data = dhtsensor.getTempAndHumidity();
  if (data.temperature > 32) {
    display.clearDisplay();;
    print_line("TEMP HIGH", 0, 40, 1);
  }

  else if (data.temperature < 26) {
    display.clearDisplay();;
    print_line("TEMP LOW", 0, 40, 1);
  }
  
  if (data.humidity > 80) {
    display.clearDisplay();;
    print_line("HUMIDITY HIGH", 0, 50, 1);
  }
  
  else if (data.humidity < 60) {
    display.clearDisplay();;
    print_line("HUMIDITY LOW", 0, 50, 1);
  }
}
